"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./utils/auth.ts":
/*!***********************!*\
  !*** ./utils/auth.ts ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentUser: function() { return /* binding */ getCurrentUser; },\n/* harmony export */   isAuthenticated: function() { return /* binding */ isAuthenticated; },\n/* harmony export */   login: function() { return /* binding */ login; },\n/* harmony export */   logout: function() { return /* binding */ logout; },\n/* harmony export */   register: function() { return /* binding */ register; }\n/* harmony export */ });\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./firebase */ \"./utils/firebase.ts\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"./node_modules/firebase/auth/dist/esm/index.esm.js\");\n\n\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(_firebase__WEBPACK_IMPORTED_MODULE_0__.app);\nconst STORAGE_KEY = \"nikhilsJeansAuthToken\";\nconst getCurrentUser = ()=>{\n    var _currentUser_email;\n    if (false) {}\n    // Instead of storing the full user object, we now rely on Firebase's auth state\n    const currentUser = auth.currentUser;\n    if (!currentUser) return null;\n    return {\n        id: currentUser.uid,\n        name: currentUser.displayName || ((_currentUser_email = currentUser.email) === null || _currentUser_email === void 0 ? void 0 : _currentUser_email.split(\"@\")[0]) || \"User\",\n        email: currentUser.email || \"\",\n        emailVerified: currentUser.emailVerified\n    };\n};\nconst isAuthenticated = ()=>{\n    if (false) {}\n    // Check if user is authenticated with Firebase\n    return !!auth.currentUser;\n};\nconst login = async (email, password)=>{\n    try {\n        // Use Firebase authentication\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signInWithEmailAndPassword)(auth, email, password);\n        const firebaseUser = userCredential.user;\n        // Store only the auth token in localStorage for persistence\n        const token = await firebaseUser.getIdToken();\n        localStorage.setItem(STORAGE_KEY, token);\n        // Check if email is verified\n        if (!firebaseUser.emailVerified) {\n            // Create user object for the app\n            const user = {\n                id: firebaseUser.uid,\n                name: firebaseUser.displayName || email.split(\"@\")[0],\n                email: firebaseUser.email || email,\n                emailVerified: false\n            };\n            return {\n                success: true,\n                message: \"Login successful, but please verify your email\",\n                user,\n                emailVerified: false\n            };\n        }\n        // Create user object for the app\n        const user = {\n            id: firebaseUser.uid,\n            name: firebaseUser.displayName || email.split(\"@\")[0],\n            email: firebaseUser.email || email,\n            emailVerified: true\n        };\n        return {\n            success: true,\n            message: \"Login successful\",\n            user,\n            emailVerified: true\n        };\n    } catch (error) {\n        console.error(\"Login error:\", error);\n        let message = \"An error occurred during login\";\n        // Parse Firebase error messages\n        if (error.code === \"auth/user-not-found\") {\n            message = \"No user found with this email\";\n        } else if (error.code === \"auth/wrong-password\") {\n            message = \"Invalid password\";\n        } else if (error.code === \"auth/invalid-email\") {\n            message = \"Invalid email address\";\n        } else if (error.code === \"auth/user-disabled\") {\n            message = \"This account has been disabled\";\n        } else if (error.code === \"auth/network-request-failed\") {\n            message = \"Network error. Please check your connection.\";\n        }\n        return {\n            success: false,\n            message\n        };\n    }\n};\nconst register = async (name, email, password)=>{\n    try {\n        // Use Firebase authentication\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.createUserWithEmailAndPassword)(auth, email, password);\n        const firebaseUser = userCredential.user;\n        // Send email verification\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.sendEmailVerification)(firebaseUser);\n        // Store only the auth token in localStorage for persistence\n        const token = await firebaseUser.getIdToken();\n        localStorage.setItem(STORAGE_KEY, token);\n        // Create user object\n        const user = {\n            id: firebaseUser.uid,\n            name: name || email.split(\"@\")[0],\n            email: firebaseUser.email || email,\n            emailVerified: false\n        };\n        return {\n            success: true,\n            message: \"Registration successful. Please check your email to verify your account.\",\n            user,\n            emailVerificationSent: true\n        };\n    } catch (error) {\n        console.error(\"Registration error:\", error);\n        let message = \"An error occurred during registration\";\n        // Parse Firebase error messages\n        if (error.code === \"auth/email-already-in-use\") {\n            message = \"User with this email already exists\";\n        } else if (error.code === \"auth/invalid-email\") {\n            message = \"Invalid email address\";\n        } else if (error.code === \"auth/weak-password\") {\n            message = \"Password is too weak\";\n        } else if (error.code === \"auth/network-request-failed\") {\n            message = \"Network error. Please check your connection.\";\n        }\n        return {\n            success: false,\n            message\n        };\n    }\n};\nconst logout = async ()=>{\n    try {\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signOut)(auth);\n        // Clear the auth token from localStorage\n        localStorage.removeItem(STORAGE_KEY);\n        return {\n            success: true,\n            message: \"Logout successful\"\n        };\n    } catch (error) {\n        console.error(\"Logout error:\", error);\n        return {\n            success: false,\n            message: \"An error occurred during logout\"\n        };\n    }\n};\n// Set up auth state listener\nif (true) {\n    (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.onAuthStateChanged)(auth, (firebaseUser)=>{\n        if (firebaseUser) {\n            // User is signed in - update the token\n            firebaseUser.getIdToken().then((token)=>{\n                localStorage.setItem(STORAGE_KEY, token);\n            });\n        } else {\n            // User is signed out - remove the token\n            localStorage.removeItem(STORAGE_KEY);\n        }\n    });\n    // Try to restore the session using the stored token\n    const token = localStorage.getItem(STORAGE_KEY);\n    if (token && !auth.currentUser) {\n        // Token exists but no current user - Firebase will handle the auth state\n        // The onAuthStateChanged listener above will be triggered when auth state is restored\n        console.log(\"Attempting to restore authentication session\");\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/auth.ts\n"));

/***/ })

});