"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./utils/firestore.ts":
/*!****************************!*\
  !*** ./utils/firestore.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addProduct: function() { return /* binding */ addProduct; },\n/* harmony export */   clearProductCache: function() { return /* binding */ clearProductCache; },\n/* harmony export */   db: function() { return /* binding */ db; },\n/* harmony export */   deleteProduct: function() { return /* binding */ deleteProduct; },\n/* harmony export */   deleteProductImage: function() { return /* binding */ deleteProductImage; },\n/* harmony export */   getAllCategories: function() { return /* binding */ getAllCategories; },\n/* harmony export */   getAllProducts: function() { return /* binding */ getAllProducts; },\n/* harmony export */   getFeaturedProducts: function() { return /* binding */ getFeaturedProducts; },\n/* harmony export */   getNewArrivals: function() { return /* binding */ getNewArrivals; },\n/* harmony export */   getNextProductsPage: function() { return /* binding */ getNextProductsPage; },\n/* harmony export */   getProductById: function() { return /* binding */ getProductById; },\n/* harmony export */   getProductsByCategory: function() { return /* binding */ getProductsByCategory; },\n/* harmony export */   storage: function() { return /* binding */ storage; },\n/* harmony export */   updateProduct: function() { return /* binding */ updateProduct; },\n/* harmony export */   uploadProductImage: function() { return /* binding */ uploadProductImage; }\n/* harmony export */ });\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./firebase */ \"./utils/firebase.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/storage */ \"./node_modules/firebase/storage/dist/esm/index.esm.js\");\n\n\n\n// Initialize Firestore\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getFirestore)(_firebase__WEBPACK_IMPORTED_MODULE_0__.app);\n// Initialize Storage\nconst storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_2__.getStorage)(_firebase__WEBPACK_IMPORTED_MODULE_0__.app);\n// Collection references\nconst productsCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"products\");\nconst categoriesCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"categories\");\n// Cache for products\nconst productCache = {\n    all: null,\n    byId: {},\n    byCategory: {},\n    lastFetched: 0\n};\n// Cache expiration time (5 minutes)\nconst CACHE_EXPIRATION = 5 * 60 * 1000;\n// Validate product data before saving\nconst validateProduct = (product)=>{\n    if (!product.name || typeof product.name !== \"string\") {\n        return \"Product name is required\";\n    }\n    if (!product.price || isNaN(Number(product.price))) {\n        return \"Valid product price is required\";\n    }\n    if (!product.category || typeof product.category !== \"string\") {\n        return \"Product category is required\";\n    }\n    if (!product.image || typeof product.image !== \"string\") {\n        return \"Product image is required\";\n    }\n    return null; // No errors\n};\n// Clean product data for Firestore\nconst cleanProductData = (product)=>{\n    const cleanedProduct = {};\n    Object.entries(product).forEach((param)=>{\n        let [key, value] = param;\n        if (value !== undefined && value !== null) {\n            // Handle specific field types\n            if (key === \"price\" || key === \"originalPrice\" || key === \"stock\") {\n                cleanedProduct[key] = Number(value);\n            } else if (key === \"sizes\" && typeof value === \"string\") {\n                cleanedProduct[key] = value.split(\",\").map((s)=>s.trim()).filter(Boolean);\n            } else if (key === \"featured\" && typeof value === \"string\") {\n                cleanedProduct[key] = value === \"true\";\n            } else {\n                cleanedProduct[key] = value;\n            }\n        }\n    });\n    // Add timestamps\n    if (!cleanedProduct.createdAt) {\n        cleanedProduct.createdAt = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)();\n    }\n    cleanedProduct.updatedAt = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)();\n    return cleanedProduct;\n};\n// Check if cache is valid\nconst isCacheValid = ()=>{\n    return productCache.all !== null && Date.now() - productCache.lastFetched < CACHE_EXPIRATION;\n};\n// Get all products with pagination and caching\nconst getAllProducts = async function() {\n    let pageSize = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    try {\n        // If cache is valid and we're not paginating, return cached products\n        if (isCacheValid() && pageSize === 0 && productCache.all) {\n            console.log(\"Returning products from cache\");\n            return productCache.all;\n        }\n        console.log(\"Fetching products from Firestore\");\n        let productsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(productsCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"));\n        // Apply pagination if pageSize is specified\n        if (pageSize > 0) {\n            productsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(productsQuery, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.limit)(pageSize));\n        }\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(productsQuery);\n        const products = snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        // Update cache if we're getting all products\n        if (pageSize === 0) {\n            productCache.all = products;\n            // Update byId and byCategory caches\n            products.forEach((product)=>{\n                productCache.byId[product.id] = product;\n                if (product.category) {\n                    if (!productCache.byCategory[product.category]) {\n                        productCache.byCategory[product.category] = [];\n                    }\n                    productCache.byCategory[product.category].push(product);\n                }\n            });\n            productCache.lastFetched = Date.now();\n        }\n        console.log(\"Retrieved \".concat(products.length, \" products from Firestore\"));\n        return products;\n    } catch (error) {\n        console.error(\"Error getting products from Firestore:\", error);\n        throw new Error(\"Failed to fetch products\");\n    }\n};\n// Get next page of products\nconst getNextProductsPage = async function(lastVisible) {\n    let pageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;\n    try {\n        const productsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(productsCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.startAfter)(lastVisible), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.limit)(pageSize));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(productsQuery);\n        const products = snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        // Update cache for these products\n        products.forEach((product)=>{\n            productCache.byId[product.id] = product;\n            if (product.category) {\n                if (!productCache.byCategory[product.category]) {\n                    productCache.byCategory[product.category] = [];\n                }\n                // Check if product already exists in category cache\n                const existingIndex = productCache.byCategory[product.category].findIndex((p)=>p.id === product.id);\n                if (existingIndex >= 0) {\n                    productCache.byCategory[product.category][existingIndex] = product;\n                } else {\n                    productCache.byCategory[product.category].push(product);\n                }\n            }\n        });\n        return products;\n    } catch (error) {\n        console.error(\"Error getting next page of products:\", error);\n        throw new Error(\"Failed to fetch more products\");\n    }\n};\n// Get products by category with caching\nconst getProductsByCategory = async (category)=>{\n    try {\n        // Check if we have this category in cache and it's still valid\n        if (isCacheValid() && productCache.byCategory[category] && productCache.byCategory[category].length > 0) {\n            console.log(\"Returning \".concat(category, \" products from cache\"));\n            return productCache.byCategory[category];\n        }\n        console.log(\"Fetching \".concat(category, \" products from Firestore\"));\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(productsCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"category\", \"==\", category));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        const products = snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        // Update cache\n        productCache.byCategory[category] = products;\n        // Also update byId cache\n        products.forEach((product)=>{\n            productCache.byId[product.id] = product;\n        });\n        return products;\n    } catch (error) {\n        console.error(\"Error getting \".concat(category, \" products:\"), error);\n        throw new Error(\"Failed to fetch \".concat(category, \" products\"));\n    }\n};\n// Get featured products with caching\nconst getFeaturedProducts = async function() {\n    let limitCount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8;\n    try {\n        // If we have all products cached, filter them\n        if (isCacheValid() && productCache.all) {\n            const featured = productCache.all.filter((p)=>p.featured).slice(0, limitCount);\n            if (featured.length > 0) {\n                console.log(\"Returning featured products from cache\");\n                return featured;\n            }\n        }\n        console.log(\"Fetching featured products from Firestore\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(productsCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"featured\", \"==\", true), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.limit)(limitCount));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        const products = snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        // Update byId cache\n        products.forEach((product)=>{\n            productCache.byId[product.id] = product;\n            // Update category cache if needed\n            if (product.category) {\n                if (!productCache.byCategory[product.category]) {\n                    productCache.byCategory[product.category] = [];\n                }\n                // Check if product already exists in category cache\n                const existingIndex = productCache.byCategory[product.category].findIndex((p)=>p.id === product.id);\n                if (existingIndex >= 0) {\n                    productCache.byCategory[product.category][existingIndex] = product;\n                } else {\n                    productCache.byCategory[product.category].push(product);\n                }\n            }\n        });\n        return products;\n    } catch (error) {\n        console.error(\"Error getting featured products:\", error);\n        throw new Error(\"Failed to fetch featured products\");\n    }\n};\n// Get new arrivals with caching\nconst getNewArrivals = async function() {\n    let limitCount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8;\n    try {\n        // If we have all products cached, filter them\n        if (isCacheValid() && productCache.all) {\n            const newArrivals = productCache.all.filter((p)=>p.new).slice(0, limitCount);\n            if (newArrivals.length > 0) {\n                console.log(\"Returning new arrivals from cache\");\n                return newArrivals;\n            }\n        }\n        console.log(\"Fetching new arrivals from Firestore\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(productsCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"new\", \"==\", true), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.limit)(limitCount));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n        const products = snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        // Update byId cache\n        products.forEach((product)=>{\n            productCache.byId[product.id] = product;\n            // Update category cache if needed\n            if (product.category) {\n                if (!productCache.byCategory[product.category]) {\n                    productCache.byCategory[product.category] = [];\n                }\n                // Check if product already exists in category cache\n                const existingIndex = productCache.byCategory[product.category].findIndex((p)=>p.id === product.id);\n                if (existingIndex >= 0) {\n                    productCache.byCategory[product.category][existingIndex] = product;\n                } else {\n                    productCache.byCategory[product.category].push(product);\n                }\n            }\n        });\n        return products;\n    } catch (error) {\n        console.error(\"Error getting new arrivals:\", error);\n        throw new Error(\"Failed to fetch new arrivals\");\n    }\n};\n// Get product by ID with caching\nconst getProductById = async (id)=>{\n    try {\n        // Check if product is in cache\n        if (productCache.byId[id]) {\n            console.log(\"Returning product \".concat(id, \" from cache\"));\n            return productCache.byId[id];\n        }\n        console.log(\"Fetching product \".concat(id, \" from Firestore\"));\n        const productDoc = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"products\", id);\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(productDoc);\n        if (snapshot.exists()) {\n            const product = {\n                id: snapshot.id,\n                ...snapshot.data()\n            };\n            // Update cache\n            productCache.byId[id] = product;\n            return product;\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting product:\", error);\n        throw new Error(\"Failed to fetch product details\");\n    }\n};\n// Clear cache for a specific product\nconst invalidateProductCache = (productId, categoryId)=>{\n    // Remove from byId cache\n    if (productCache.byId[productId]) {\n        delete productCache.byId[productId];\n    }\n    // Remove from category cache if category is provided\n    if (categoryId && productCache.byCategory[categoryId]) {\n        productCache.byCategory[categoryId] = productCache.byCategory[categoryId].filter((p)=>p.id !== productId);\n    }\n    // Set all cache to null to force refresh on next fetch\n    productCache.all = null;\n};\n// Clear entire cache\nconst clearProductCache = ()=>{\n    productCache.all = null;\n    productCache.byId = {};\n    productCache.byCategory = {};\n    productCache.lastFetched = 0;\n};\n// Upload image to Firebase Storage\nconst uploadProductImage = async (file)=>{\n    try {\n        // Create a unique filename\n        const timestamp = new Date().getTime();\n        const fileName = \"product_\".concat(timestamp, \"_\").concat(file.name.replace(/[^a-zA-Z0-9.]/g, \"_\"));\n        // Create a reference to the file in storage\n        const storageRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_2__.ref)(storage, \"product_images/\".concat(fileName));\n        // Upload the file\n        await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_2__.uploadBytes)(storageRef, file);\n        // Get the download URL\n        const downloadURL = await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_2__.getDownloadURL)(storageRef);\n        return downloadURL;\n    } catch (error) {\n        console.error(\"Error uploading image:\", error);\n        throw new Error(\"Failed to upload product image\");\n    }\n};\n// Delete product image from Firebase Storage\nconst deleteProductImage = async (imageUrl)=>{\n    try {\n        // Extract the file path from the URL\n        const decodedUrl = decodeURIComponent(imageUrl);\n        const startIndex = decodedUrl.indexOf(\"product_images\");\n        if (startIndex === -1) {\n            console.warn(\"Not a Firebase Storage URL or not in product_images folder:\", imageUrl);\n            return;\n        }\n        const endIndex = decodedUrl.indexOf(\"?\", startIndex);\n        const filePath = endIndex !== -1 ? decodedUrl.substring(startIndex, endIndex) : decodedUrl.substring(startIndex);\n        // Create a reference to the file\n        const imageRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_2__.ref)(storage, filePath);\n        // Delete the file\n        await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_2__.deleteObject)(imageRef);\n        console.log(\"Product image deleted successfully:\", filePath);\n    } catch (error) {\n        console.error(\"Error deleting product image:\", error);\n    // Don't throw error here, as we want to continue with product deletion\n    // even if image deletion fails\n    }\n};\n// Add a new product with transaction for category tracking\nconst addProduct = async (product)=>{\n    try {\n        console.log(\"Adding product to Firestore:\", product);\n        // Validate product data\n        const validationError = validateProduct(product);\n        if (validationError) {\n            throw new Error(validationError);\n        }\n        // Clean the product data for Firestore\n        const cleanedProduct = cleanProductData(product);\n        console.log(\"Cleaned product data for Firestore:\", cleanedProduct);\n        // Use transaction to add product and update category data\n        const newProduct = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.runTransaction)(db, async (transaction)=>{\n            // Add the product document\n            const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)(productsCollection, cleanedProduct);\n            const newProductWithId = {\n                id: docRef.id,\n                ...cleanedProduct\n            };\n            // Update or create category count\n            const categoryRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(categoriesCollection, cleanedProduct.category);\n            const categoryDoc = await transaction.get(categoryRef);\n            if (categoryDoc.exists()) {\n                // Update existing category\n                transaction.update(categoryRef, {\n                    count: (categoryDoc.data().count || 0) + 1,\n                    updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n                });\n            } else {\n                // Create new category\n                transaction.set(categoryRef, {\n                    id: cleanedProduct.category,\n                    name: cleanedProduct.category.charAt(0).toUpperCase() + cleanedProduct.category.slice(1),\n                    count: 1,\n                    createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n                    updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n                });\n            }\n            return newProductWithId;\n        });\n        // Update cache with the new product\n        if (productCache.all) {\n            productCache.all.unshift(newProduct);\n        }\n        productCache.byId[newProduct.id] = newProduct;\n        if (newProduct.category) {\n            if (!productCache.byCategory[newProduct.category]) {\n                productCache.byCategory[newProduct.category] = [];\n            }\n            productCache.byCategory[newProduct.category].unshift(newProduct);\n        }\n        console.log(\"Product added successfully with ID:\", newProduct.id);\n        return newProduct;\n    } catch (error) {\n        console.error(\"Error adding product to Firestore:\", error);\n        throw error;\n    }\n};\n// Update a product\nconst updateProduct = async (id, product)=>{\n    try {\n        const productDoc = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"products\", id);\n        // Get existing product to check if category is changing\n        const existingProductSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(productDoc);\n        if (!existingProductSnap.exists()) {\n            throw new Error(\"Product not found\");\n        }\n        const existingProduct = existingProductSnap.data();\n        const cleanedUpdates = cleanProductData(product);\n        // Always update the timestamp when modified\n        cleanedUpdates.updatedAt = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)();\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.runTransaction)(db, async (transaction)=>{\n            // Update product document\n            transaction.update(productDoc, cleanedUpdates);\n            // If category changed, update both old and new category counts\n            if (product.category && existingProduct.category !== product.category) {\n                // Decrease old category count\n                const oldCategoryRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(categoriesCollection, existingProduct.category);\n                const oldCategoryDoc = await transaction.get(oldCategoryRef);\n                if (oldCategoryDoc.exists()) {\n                    const oldCount = oldCategoryDoc.data().count || 0;\n                    if (oldCount > 1) {\n                        transaction.update(oldCategoryRef, {\n                            count: oldCount - 1,\n                            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n                        });\n                    } else {\n                        // Delete category if it will be empty\n                        transaction.delete(oldCategoryRef);\n                    }\n                }\n                // Increase new category count\n                const newCategoryRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(categoriesCollection, product.category);\n                const newCategoryDoc = await transaction.get(newCategoryRef);\n                if (newCategoryDoc.exists()) {\n                    transaction.update(newCategoryRef, {\n                        count: (newCategoryDoc.data().count || 0) + 1,\n                        updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n                    });\n                } else {\n                    transaction.set(newCategoryRef, {\n                        id: product.category,\n                        name: product.category.charAt(0).toUpperCase() + product.category.slice(1),\n                        count: 1,\n                        createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)(),\n                        updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n                    });\n                }\n            }\n        });\n        // Update cache\n        if (productCache.byId[id]) {\n            const updatedProduct = {\n                ...productCache.byId[id],\n                ...product\n            };\n            productCache.byId[id] = updatedProduct;\n            // Update in all products cache if it exists\n            if (productCache.all) {\n                const index = productCache.all.findIndex((p)=>p.id === id);\n                if (index >= 0) {\n                    productCache.all[index] = updatedProduct;\n                }\n            }\n            // Handle category change in cache\n            if (product.category && existingProduct.category !== product.category) {\n                // Remove from old category cache\n                if (productCache.byCategory[existingProduct.category]) {\n                    productCache.byCategory[existingProduct.category] = productCache.byCategory[existingProduct.category].filter((p)=>p.id !== id);\n                }\n                // Add to new category cache\n                if (!productCache.byCategory[product.category]) {\n                    productCache.byCategory[product.category] = [];\n                }\n                productCache.byCategory[product.category].push(updatedProduct);\n            } else if (product.category) {\n                // Update in same category\n                if (productCache.byCategory[product.category]) {\n                    const catIndex = productCache.byCategory[product.category].findIndex((p)=>p.id === id);\n                    if (catIndex >= 0) {\n                        productCache.byCategory[product.category][catIndex] = updatedProduct;\n                    }\n                }\n            }\n        } else {\n            // If not in cache, invalidate all cache to force refresh\n            clearProductCache();\n        }\n    } catch (error) {\n        console.error(\"Error updating product:\", error);\n        throw new Error(\"Failed to update product\");\n    }\n};\n// Delete a product\nconst deleteProduct = async (id)=>{\n    try {\n        const productDoc = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"products\", id);\n        // Get product to find its category and image URL\n        const productSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(productDoc);\n        if (!productSnap.exists()) {\n            throw new Error(\"Product not found\");\n        }\n        const productData = productSnap.data();\n        // Try to delete the product image first\n        if (productData.image) {\n            try {\n                await deleteProductImage(productData.image);\n            } catch (error) {\n                console.error(\"Error deleting product image:\", error);\n            // Continue with product deletion even if image deletion fails\n            }\n        }\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.runTransaction)(db, async (transaction)=>{\n            // Delete product\n            transaction.delete(productDoc);\n            // Update category count\n            if (productData.category) {\n                const categoryRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(categoriesCollection, productData.category);\n                const categoryDoc = await transaction.get(categoryRef);\n                if (categoryDoc.exists()) {\n                    const count = categoryDoc.data().count || 0;\n                    if (count > 1) {\n                        transaction.update(categoryRef, {\n                            count: count - 1,\n                            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n                        });\n                    } else {\n                        // Delete category if it will be empty\n                        transaction.delete(categoryRef);\n                    }\n                }\n            }\n        });\n        // Update cache\n        invalidateProductCache(id, productData.category);\n    } catch (error) {\n        console.error(\"Error deleting product:\", error);\n        throw new Error(\"Failed to delete product\");\n    }\n};\n// Get all categories with product counts\nconst getAllCategories = async ()=>{\n    try {\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(categoriesCollection);\n        return snapshot.docs.map((doc)=>doc.data());\n    } catch (error) {\n        console.error(\"Error getting categories:\", error);\n        throw new Error(\"Failed to fetch categories\");\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/firestore.ts\n"));

/***/ })

});